%-- Etude de l'existant, qu'allons nous pouvoir utiliser, quelles seront nos sources d'inspiration --
\chapter{Etude de l'existant}
% Peut être pourriront nous introduire en douceur avec le sujet des ChatBot hors du contexte de SL ?
%\section{Les ChatBots}
% A faire, ou non... (Voir ELIZA, ALICE,... comment sont-ils fait)
\section{Les bots sur \SL}
Au sein de \SL, il existe de nombreux \index{bot}bots. Ces derniers ont des rôles très différents dans leurs utilisations et objectifs.
La première catégorie d'entre eux a pour but d'apporter une aide au joueur dans des tâches peu intéressantes et répétitives, ces bots sont écrits dans un langage de script appellé \keyword{LSL}. Comme par exemple le PikkuBot~\footnote{PikkuBot : \url{http://www.pikkubot.de}}. Ce bot peut servir de vendeur dans un magasin virtuel (présentation et modèle pour l'objet à vendre), servir de sécurité, automatiser les invitations aux groupes, etc\ldots Malgré son côté pratique, ce n'est pas exactement le genre de bot que l'on souhaite pour notre projet.
En effet, ce genre de bot n'est doué d'aucune pseudo-intelligence. Ils réalisent de simples tâches qui ne demandent ni déplacements compliqués ni initiatives. 

C'est pour cette raison que nous ne développerons pas plus sur ce genre de bot.
Concernant les bots approchant de notre projet (les ChatBots), ils sont également déjà présents sur \SL. Mary Jane est par exemple un ChatBot que l'on peut acheter sur \SL pour le prix de 6999 L\$ (monnaie du jeu). 
Ce chat bot a été crée par Navillus Batra et Anthony Reisman. Ce n'est pas exactement un bot comme nous devons le réaliser pour notre projet puisque ce bot est seulement un ChatBot. Il peut converser mais n'a pas d'autonomie mobile. 
Pour répondre aux questions des avatars humains, Mary Jane utilise une base de connaissances Google (sur laquelle nous n'avons pas trouvé pas d'informations concrètes). 
Il serait intéressant de comprendre comment ce bot utilise une base de données internet pour répondre à des questions. 
Est-ce seulement pour trouver une réponse de l'ordre de la connaissance générale (encyclopédie, dictionnaire) ou trouver des informations sur son interlocuteur? 

On pourrait imaginer, grâce aux réponses données par l'avatar humain, que le bot recherche des informations sur ce dernier. 
Vu le nombre de sites de réseaux sociaux ou blogs, il n'est pas extravagant de penser que l'on peut trouver des informations sur n'importe qui.
Pour l'acquérir, il faut aller dans les locaux virtuels de Metaverse Technology à Big Mushamush. Ce projet remonte à novembre 2006.

Projet plus récent (février 2007), Sparky est un assistant virtuel. Sous la forme d'un petit robot, il peut converser avec l'avatar humain. Pour ce faire, le robot repose sur le langage
\keyword{AIML} (Artificial Intelligence Markup Language), et peut donc entretenir une conversation. A la différence de Mary Jane, ce dernier est mobile mais pas autonome pour autant. Il peut suivre l'avatar humain ou rester à l'endroit qu'on lui désigne. On peut l'acheter virtuellement sur SL Exchange pour le prix de 4.999 L\$. 
Proche du comportement que voulait avoir \index{Eliza}ELIZA, on trouve aussi sur \SL, un psychanalyste virtuel. Freudbot, comme son nom l'indique, accueille dans son cabinet virtuel les patients humains. Basé lui aussi sur un langage AIML, il est spécialisé dans les questions d'ordre psychologique. Pour parler directement avec ce bot sans passer par \SL, on peut aller directement sur leur site \footnote{http://psych.athabascau.ca/html/Freudbot/test.html}.
Ces deux derniers bots peuvent nous être utiles pour notre projet car ils utilisent tous les deux le système AIML pour leurs côtés ChatBot. C'est une approche qu'il faut envisager pour notre propre bot. En les étudiant de manière plus approfondie, on pourrait cerner les limites et les astuces de ce genre de \index{chatbot}ChatBot.

Un autre projet hébergé sur l'ile virtuelle Masa group (Masa Group), consiste en une île peuplée de fées.
A la différence des deux ChatBots présentés ci-dessus, ces fées ont une approche mobile. Leur aspect réaliste repose sur leur mobilité cohérente, comme si c'était un humain qui les contrôlait. A défaut d'avoir une conversation élaborée, elles vont jouer la timidité et éviter au maximum l'interaction avec le joueur humain.
En regroupant les mouvements de ces fées et le côté ChatBot, on pourrait obtenir une attitude proche de l'humain.
C'est pour cette dernière raison qu'il faut que l'on prenne exemple sur ce genre de création pour réaliser les mouvements de notre bot. Si notre bot a une démarche intrigante, il sera difficile d'aller parler avec d'autres avatars et donc d'effectuer sa mission.

Le projet D.A.R.W.I.N. (Digital Artificial Residant With Intelligent Networked) est un bot qui a pour vocation d'apprendre et améliorer son intelligence artificielle. Pour se faire, il faut qu'un avatar humain lui parle pour accroître ses connaissances. Cette méthode d'enseignement se rapproche de celle qu'a un humain. Les connaissances sont liées aux aléas des rencontres et non basé sur une vérité absolue dictée par une encyclopédie. 
Ce projet est intéressant à étudier car il adopte une stratégie différente à celle d'AIML. Dans notre choix d'implémentation de ChatBot, serait-il plus judicieux d'utiliser AIML, un système comme DARWIN, ou mixer les deux ?

	% *************************METTRE UNE BALISE COMMENTAIRE*******************************************
	% Il est difficile de trouver des informations sur le codage de ces différents bots pour une raison essentielle: 
	% ils sont destinés à être vendu virtuellement. Donc au final, cette étude de l'existant est en perpétuelle construction au 
	% fur à mesure des informations que l'on pourrait glaner.
	% *************************************************************************************************
	
  % Peut servir d'introduction à ce document
Il existe aussi beaucoup de rumeurs sur l'existence de bots autonomes. On trouve sur des forums des personnes jouant à \SL ayant rencontré des avatars dont les réponses pouvaient faire penser à un ChatBot. \SL se rapproche d'un test de Turing à grande échelle. A la différence que sur \SL, les ChatBots \index{chatbot}ne sont pas forcément révélés et donnent lieu aux plus grandes rêveries.

\section{La \index{LibSL}LibSL}
Pour la réalisation de ce projet, nous avons à disposition une bibliothèque qui permet de gérer l'intéraction entre le serveur de \SL et notre application en local. Cette bibliothèque est accompagnée d'une documentation et de tutoriels permettant la création d'un BOT de base~\footnote{How to create a basic libSL bot : \url{http://www.libsecondlife.org/wiki/Use_libSL_to_login_to_the_SL_grid}} 
(Entrée du BOT dans l'univers de \SL, et qui fait parler le BOT : "Hello World!"). Un exemple de ce que permet cette bibliothèque, ici, une simple réponse (renvoi du message reçu) à un message instantané (IM) défini par la méthode $Self\_OnInstantMessage$ : 
%
\begin{code}
// put this somewhere when you want to 
// start processing instant messages
client.Self.OnInstantMessage += 
	new AgentManager.InstantMessageCallback(Self_OnInstantMessage); 
	
// then define the Self_OnInstantMessage method
static void Self_OnInstantMessage(InstantMessage im, Simulator sim)
{
    // there are a variety of InstantMessageDialog choices.. 
    // MessageFromObject and MessageFromAgent
    // would be the two most common
    if (im.Dialog == InstantMessageDialog.MessageFromAgent) 
    {
        client.Self.InstantMessage(im.FromAgentID
         ,im.Message, im.IMSessionID); 
        //send them an instant message back 
        //(this thing will copy any message 
        // the bot receives in an IM)
    }
}
\end{code}

\textit{Extrait d'un tutoriel du site web de la LibSL.}
Cette bibliothèque ayant déjà été utilisée par les étudiants qui ont fait ce projet l'année passée, nous pourrons si nous avons des questions sur son utilisation, les leur poser et ainsi éviter de perdre du temps à la compréhension de son fonctionnement.

\section{AIML}
Les associations d'idées des robots sont (souvent) stockées sous forme de fichiers structurés (proche de la structure XML), cette structure représentant un arbre ou un graphe de connecteurs logique (Ontologie). Ces fichiers portent le nom de fichier \index{AIML} (Artificial Intelligence Markup Language).

%Source, un fichier AIML :
\begin{code}
<category>
    <pattern>* ORNITHORYNQUE</pattern>
    <template>L'ornithorynque (Ornithorhynchus anatinus)   
              est une petite espèce de mammifère semi-aquatique endémique 
              vivant dans l'est de l'Australie
    </template>
</category>
\end{code}

\textit{Source, A.L.I.C.E. :} \footnote{ALICE : \url{http://www.alicebot.org/aiml.html}} \textit{et pnambique :} \footnote{pnambique : \url{http://www.pnambique.com/index.php/2008051160/chatterbot-et-mots-cles-precis-principes.html}}

Avec une telle structure, si on pose au bot la question: "Qu'est ce qu'un ornithorynque ?", il répondra par la phrase template. Néanmoins il répondra la même chose à la question: "Es-tu un ornithorynque ?". C'est ici que résident la plupart des difficultés dans la création de fichier AIML. Néanmoins, une telle structure reste une bonne option pour le développement d'un \index{chatbot}ChatBot. En effet, les tutoriels et exemples sont nombreux et il existe des API permettant d'exploiter ces fichiers~\footnote{Un exemple d'une telle API : http://rebecca-aiml.sourceforge.net/index.htm} (le cerveau du bot), elles contiennent en plus une structure AIML de base qui paraît assez complète.

\section{Le projet de l'année passée}
Nous avons également à disposition le projet des étudiants de l'année dernière. Bien que leur rapport ne précise pas de façon claire quelles fonctionnalités ont réellement été implantées, si l'on regarde leur planning (et si celui-ci est à jour), alors on peut voir que les fonctionnalités suivantes fonctionnent:

\begin{itemize}
\item Déplacement autonome du BOT ;
\item Suivre un autre personnage sur \SL ;
\item Utilisation des canaux de discussion sur \SL ;
\item Estimer son environnement ;
\item Analyse des messages reçus ;
\end{itemize}

Toujours d'après ce planning, on voit que les tâches de traitement des données (messages reçus) et l'émission d'une réponse intelligente n'ont pas été mis en place.
Il serait donc intéressant d'organiser une rencontre avec les étudiants de l'année passée pour discuter de l'état d'avancement de leur projet plus précisément.

%---------------------------- PARTIE DU WIKI BotInSL ---------------------------------%

Afin de voir si ce projet peut être utilisé dans l'ensemble ou en partie, nous avons testé celui-ci.

\section{Tests du projet existant}

\subsection{Connexion et recherche d'avatars}

Lors du lancement du programme, la connexion avec le serveur \SL se réalise correctement. Dès lors, le bot cherche une île. Malgré une dizaine de lancements, le bot choisit toujours la même île de départ. Ensuite, il lance une fonction de recherche d'avatars. Trouvant personne, il recherche une autre île, là n'en trouve pas d'autres, perdu,il se déconnecte. Voilà le scénario qui se passe au lancement de ce programme.
En réalité, il existe bien plus d'îles possibles et bien plus peuplées que celle qu'il choisit. Mais le problème vient du fait que sur cette île, il y a bien des avatars. Or il n'en détecte pas. Pour s'en assurer, nous avons amener notre compte joueur sur cette île.
Même en se trouvant à côté de lui, il ne détectait personne.


\image{0.7}{LogBotSL.png}{Log du bot}


Le bot présentait enfin le même soucis que lors de nos prototypes, son apparence ne se chargeait pas, laissant place à un halo de fumée. Le groupe a donc eu le même souci que nous, lors de nos essais, il faudra donc se pencher sur ce problème rapidement.

\image{0.7}{bugapparencebot.png}{Le bug fumée}

\subsection{Le chatbot}

Avec les soucis évoqués au-dessus, nous avons dû modifier un peu de code pour que le bot puisse nous rencontrer. Une fois fait, nous avons pu discuter avec lui. Cette partie du projet est opérationnelle. Le bot répond bien et pose quelques questions quand il ne sait pas répondre. Les réponses sont toutefois décevantes, c'est peut être parce que nous savons que c'est bot mais on voit rapidement que c'est bien une machine. 
Par exemple: 

\begin{small}
\begin{verbatim}
[13:27]  Jbesse Brandi: hello
[13:27]  Vulverine Cerise: Hii there!
[13:27]  Jbesse Brandi: how are you ?
[13:27]  Vulverine Cerise: I am  functioning within normal parammeters.
\end{verbatim}
\end{small}

Cet autre exemple montre bien le côté machine en sortant automatiquement une certaine définition de la musique.Les réponses sont instantanées, ce qui augmente cet effet machine.

\begin{small}
\begin{verbatim}
[13:27]  Jbesse Brandi: music
[13:27]  Vulverine Cerise: MUSIICis the universal language of all mankind.
\end{verbatim}
\end{small}

Cet exemple, bien que dépassé maintenant (il faudra juste mettre sa base de données à jour) montre qu'il arrive à détecter une question sur le président actuel et répond.

\begin{small}
\begin{verbatim}
[13:30]  Jbesse Brandi: who is the actual president ?
[13:30]  Vulverine Cerise: George W. ush.
\end{verbatim}
\end{small}

alors qu'il ne comprend pas en lui donnant juste les mots-clés

\begin{small}
\begin{verbatim}
[13:31]  Jbesse Brandi: actual president ?
[13:31]  Vulverine Cerise: What do you want to say? 
\end{verbatim}
\end{small}

Cette partie du programme nous montre ce que peut donner une conversation avec un bot mais il faudra revoir son fonctionnement pour qu'il fasse mieux illusion. Cela reste néanmoins une bonne brique de départ pour notre bot. La correspondance avec les fichiers AIML fonctionne correctement. Il faudra juste les remettre à jour et vérifier certains comportements de réponse. 

\subsubsection{La création d'erreurs d'orthographe/frappe}

En discutant avec le bot, nous nous sommes rendus compte que celui-ci parlait avec des fautes d'orthographe. Par exemple:

\begin{small}
\begin{verbatim}
Vulverine Cerise: What is yor purpose in aking? I spend aall my tme online.
\end{verbatim}
\end{small}

Clairement, le bot a voulu faire l'illusion de fautes de frappe en oubliant certaines et en doublant d'autres. Cette partie est très intéressante pour notre projet. En réglant légèrement, ce taux de frappes qui parait ici un peu élevé, nous pourrions utiliser cette partie du code pour notre propre bot.

\subsection{Conclusion}

Le code de l'ancien groupe peut nous être utile comme pierre de base au projet. Ils ont établis qu'un tel projet était réalisable et on peut s'en rendre en exécutant leur projet.
Nous n'utiliserons pas la même architecture qu'eux mais néanmoins, un certain nombre de ligne de code peuvent nous servir (connexion du bot, ajout de fautes aléatoire, chatbot...).